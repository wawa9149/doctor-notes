version: "3.8"

services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      # 필요시 빌드 ARG 추가
      # args:
      #   ENV: production
    container_name: doctor-notes-backend
    command: >
      uvicorn app.main:app
      --host 0.0.0.0 --port 8000
      --workers 2
    ports:
      - "8000:8000"
    environment:
      - PYTHONPATH=/app
      # CORS를 최소화하려면 프론트가 같은 오리진으로 프록시하거나,
      # 백엔드에서 허용오리진을 ENV로 관리
      # - ALLOW_ORIGINS=http://localhost,http://example.com
    networks:
      - doctor-notes-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:8000/health || exit 1"]
      interval: 10s
      timeout: 3s
      retries: 5
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    # prod에서는 소스 마운트 지양 (이미지에 포함)
    # dev용은 profiles 아래에 따로 분리

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      # Dockerfile이 multi-stage면 target 지정 가능
      # target: runner
    container_name: doctor-notes-frontend
    ports:
      - "80:3000"
    depends_on:
      backend:
        condition: service_healthy
    environment:
      # 프론트에서 백엔드 접근은 서비스명 DNS를 사용 (같은 네트워크)
      - NEXT_PUBLIC_API_BASE_URL=http://backend:8000
      - NODE_ENV=production
    networks:
      - doctor-notes-network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

networks:
  doctor-notes-network:
    driver: bridge
